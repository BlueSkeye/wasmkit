
namespace WasmLib
{
    internal enum OpCodes
    {
        Unreachable	= 0x00, // trap immediately
        Nop	= 0x01, // No operation
        Block = 0x02, // sig : block_type    begin a sequence of expressions, yielding 0 or 1 values
        Loop = 0x03, // 	sig : block_type    begin a block which can also form control flow loops
        If = 0x04, // sig : block_type    begin if expression
        Else = 0x05, // begin else expression of if
        End	= 0x0b, // end a block, loop, or if
        Br = 0x0c, // Relative_depth : varuint32	break that targets an outer nested block
        BrIf = 0x0d, // relative_depth : varuint32  conditional break that targets an outer nested block
        BrTable = 0x0e, // see below   branch table control flow construct
        Return = 0x0f, // return zero or one value from this function
        Call = 0x10, // function_index : varuint32  call a function by its index
        CallIndirect = 0x11, // type_index : varuint32, reserved : varuint1 call a function indirect with an expected signature
        Drop = 0x1a, // ignore value
        Select = 0x1b, // select one of two values based on condition
        GetLocal = 0x20, // local_index : varuint32 read a local variable or parameter
        SetLocal = 0x21, // local_index : varuint32 write a local variable or parameter
        TeeLocal = 0x22, // local_index : varuint32 write a local variable or parameter and return the same value
        GetGlobal = 0x23, // global_index : varuint32    read a global variable
        SetGlobal = 0x24, // global_index : varuint32    write a global variable
        I32Load	= 0x28, // memory_immediate    load from memory
        I64Load	= 0x29, // memory_immediate    load from memory
        F32Load	= 0x2a, // memory_immediate    load from memory
        F64Load	= 0x2b, // memory_immediate    load from memory
        I32Load8_s	= 0x2c, // memory_immediate    load from memory
        I32Load8_u	= 0x2d, // memory_immediate    load from memory
        I32Load16_s	= 0x2e, // memory_immediate    load from memory
        I32Load16_u	= 0x2f, // memory_immediate    load from memory
        I64Load8_s	= 0x30, // memory_immediate    load from memory
        I64Load8_u	= 0x31, // memory_immediate    load from memory
        I64Load16_s	= 0x32, // memory_immediate    load from memory
        I64Load16_u	= 0x33, // memory_immediate    load from memory
        I64Load32_s	= 0x34, // memory_immediate    load from memory
        I64Load32_u	= 0x35, // memory_immediate    load from memory
        I32Store	= 0x36, // memory_immediate    store to memory
        I64Store	= 0x37, // memory_immediate    store to memory
        F32Store	= 0x38, // memory_immediate    store to memory
        F64Store	= 0x39, // memory_immediate    store to memory
        I32Store8	= 0x3a, // memory_immediate    store to memory
        I32Store16	= 0x3b, // memory_immediate    store to memory
        I64Store8	= 0x3c, // memory_immediate    store to memory
        I64Store16	= 0x3d, // memory_immediate    store to memory
        I64Store32	= 0x3e, // memory_immediate    store to memory
        CurrentMemory	= 0x3f, // reserved : varuint1 query the size of memory
        GrowMemory	= 0x40, // reserved : varuint1 grow the size of memory
        I32Const	= 0x41, // value : varint32    a constant value interpreted as i32
        I64Const	= 0x42, // value : varint64    a constant value interpreted as i64
        F32Const	= 0x43, // value : uint32  a constant value interpreted as f32
        F64Const	= 0x44, // value : uint64  a constant value interpreted as f64
        I32eqz	= 0x45, // 	 	 
        I32eq	= 0x46, // 	 	 
        I32ne	= 0x47, // 	 	 
        I32lt_s	= 0x48, // 	 	 
        I32lt_u	= 0x49, // 	 	 
        I32gt_s	= 0x4a, // 	 	 
        I32gt_u	= 0x4b, // 	 	 
        I32le_s	= 0x4c, // 	 	 
        I32le_u	= 0x4d, // 	 	 
        I32ge_s	= 0x4e, // 	 	 
        I32ge_u	= 0x4f, // 	 	 
        I64eqz	= 0x50, // 	 	 
        I64eq	= 0x51, // 	 	 
        I64ne	= 0x52, // 	 	 
        I64lt_s	= 0x53, // 	 	 
        I64lt_u	= 0x54, // 	 	 
        I64gt_s	= 0x55, // 	 	 
        I64gt_u	= 0x56, // 	 	 
        I64le_s	= 0x57, // 	 	 
        I64le_u	= 0x58, // 	 	 
        I64ge_s	= 0x59, // 	 	 
        I64ge_u	= 0x5a, // 	 	 
        F32eq	= 0x5b, // 	 	 
        F32ne	= 0x5c, // 	 	 
        F32lt	= 0x5d, // 	 	 
        F32gt	= 0x5e, // 	 	 
        F32le	= 0x5f, // 	 	 
        F32ge	= 0x60, // 	 	 
        F64eq	= 0x61, // 	 	 
        F64ne	= 0x62, // 	 	 
        F64lt	= 0x63, // 	 	 
        F64gt	= 0x64, // 	 	 
        F64le	= 0x65, // 	 	 
        F64ge	= 0x66, // 	 	 
        I32clz	= 0x67, // 	 	 
        I32ctz	= 0x68, // 	 	 
        I32popcnt	= 0x69, // 	 	 
        I32add	= 0x6a, // 	 	 
        I32sub	= 0x6b, // 	 	 
        I32mul	= 0x6c, // 	 	 
        I32div_s	= 0x6d, // 	 	 
        I32div_u	= 0x6e, // 	 	 
        I32rem_s	= 0x6f, // 	 	 
        I32rem_u	= 0x70, // 	 	 
        I32and	= 0x71, // 	 	 
        I32or	= 0x72, // 	 	 
        I32xor	= 0x73, // 	 	 
        I32shl	= 0x74, // 	 	 
        I32shr_s	= 0x75, // 	 	 
        I32shr_u	= 0x76, // 	 	 
        I32rotl	= 0x77, // 	 	 
        I32rotr	= 0x78, // 	 	 
        I64clz	= 0x79, // 	 	 
        I64ctz	= 0x7a, // 	 	 
        I64popcnt	= 0x7b, // 	 	 
        I64add	= 0x7c, // 	 	 
        I64sub	= 0x7d, // 	 	 
        I64mul	= 0x7e, // 	 	 
        I64div_s	= 0x7f, // 	 	 
        I64div_u	= 0x80, // 	 	 
        I64rem_s	= 0x81, // 	 	 
        I64rem_u	= 0x82, // 	 	 
        I64and	= 0x83, // 	 	 
        I64or	= 0x84, // 	 	 
        I64xor	= 0x85, // 	 	 
        I64shl	= 0x86, // 	 	 
        I64shr_s	= 0x87, // 	 	 
        I64shr_u	= 0x88, // 	 	 
        I64rotl	= 0x89, // 	 	 
        I64rotr	= 0x8a, // 	 	 
        F32abs	= 0x8b, // 	 	 
        F32neg	= 0x8c, // 	 	 
        F32ceil	= 0x8d, // 	 	 
        F32floor	= 0x8e, // 	 	 
        F32trunc	= 0x8f, // 	 	 
        F32nearest	= 0x90, // 	 	 
        F32sqrt	= 0x91, // 	 	 
        F32add	= 0x92, // 	 	 
        F32sub	= 0x93, // 	 	 
        F32mul	= 0x94, // 	 	 
        F32div	= 0x95, // 	 	 
        F32min	= 0x96, // 	 	 
        F32max	= 0x97, // 	 	 
        F32copysign	= 0x98, // 	 	 
        F64abs	= 0x99, // 	 	 
        F64neg	= 0x9a, // 	 	 
        F64ceil	= 0x9b, // 	 	 
        F64floor	= 0x9c, // 	 	 
        F64Trunc	= 0x9d, // 	 	 
        F64nearest	= 0x9e, // 	 	 
        F64sqrt	= 0x9f, // 	 	 
        F64add	= 0xa0, // 	 	 
        F64sub	= 0xa1, // 	 	 
        F64mul	= 0xa2, // 	 	 
        F64div	= 0xa3, // 	 	 
        F64min	= 0xa4, // 	 	 
        F64max	= 0xa5, // 	 	 
        F64copysign	= 0xa6, // 	 	 
        I32wrapI64	= 0xa7, // 	 	 
        I32Trunc_sF32	= 0xa8, // 	 	 
        I32Trunc_uF32	= 0xa9, // 	 	 
        I32Trunc_sF64	= 0xaa, // 	 	 
        I32Trunc_uF64	= 0xab, // 	 	 
        I64Extend_sI32	= 0xac, // 	 	 
        I64Extend_uI32	= 0xad, // 	 	 
        I64Trunc_sF32	= 0xae, // 	 	 
        I64Trunc_uF32	= 0xaf, // 	 	 
        I64Trunc_sF64	= 0xb0, // 	 	 
        I64Trunc_uF64	= 0xb1, // 	 	 
        F32Convert_sI32	= 0xb2, // 	 	 
        F32Convert_uI32	= 0xb3, // 	 	 
        F32Convert_sI64	= 0xb4, // 	 	 
        F32Convert_uI64	= 0xb5, // 	 	 
        F32demoteF64	= 0xb6, // 	 	 
        F64Convert_sI32	= 0xb7, // 	 	 
        F64Convert_uI32	= 0xb8, // 	 	 
        F64Convert_sI64	= 0xb9, // 	 	 
        F64Convert_uI64	= 0xba, // 	 	 
        F64PromoteF32	= 0xbb, // 	 	 
        I32ReinterpretF32	= 0xbc, // 	 	 
        I64ReinterpretF64	= 0xbd, // 	 	 
        F32ReinterpretI32	= 0xbe, // 	 	 
        F64ReinterpretI64 = 0xbf, // 
    }
}
